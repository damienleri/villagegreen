type User
  @model
  @key(
    name: "byCognitoUserId"
    fields: ["cognitoUserId"]
    queryField: "userByCognitoUserId"
  )
  # @auth(rules: [{ allow: owner, operations: [update, delete] }])
  @key(name: "byPhone", fields: ["phone"], queryField: "userByPhone") {
  id: ID!
  cognitoUserId: String!
  createdAt: String
  updatedAt: String
  phone: AWSPhone!
  firstName: String
  lastName: String
  isParent: Boolean
  contacts: [Contact] @connection(keyName: "byUser", fields: ["id"])
  events: [Event] @connection(keyName: "byUser", fields: ["id"])
  messages: [Message] @connection(keyName: "byUser", fields: ["id"])
  eventPhones: [EventPhone] @connection(keyName: "byUser", fields: ["id"])
  contactsByPhone: [Contact] @connection(keyName: "byPhone", fields: ["phone"])
  eventPhonesByPhone: [EventPhone]
    @connection(keyName: "byPhone", fields: ["phone"])
  latestMessage: Message @connection
  deletedAt: AWSTimestamp
  pushToken: String
  pushEnabled: Boolean
  pushEnabledForEvents: Boolean
  pushEnabledForMessages: Boolean
}

type Event
  # @auth(rules: [{ allow: owner, operations: [update, delete] }])
  @key(
    name: "byUser"
    fields: ["userId", "createdAt"]
    queryField: "eventsByUser"
  )
  @model {
  id: ID!
  cognitoUserId: String!
  createdAt: String
  updatedAt: String
  title: String
  type: EventType
  userId: ID!
  user: User! @connection(fields: ["userId"])
  messages: [Message] @connection(keyName: "byEvent", fields: ["id"])
  eventPhones: [EventPhone] @connection(keyName: "byEvent", fields: ["id"])
  latestMessage: Message @connection
  owner: String
}

type Contact
  # @auth(rules: [{ allow: owner, operations: [read, update, delete] }])
  @key(
    name: "byUser"
    fields: ["userId", "createdAt"]
    queryField: "contactsByUser"
  )
  @key(name: "byPhone", fields: ["phone"], queryField: "contactsByPhone")
  @model {
  id: ID!
  cognitoUserId: String!
  createdAt: String
  updatedAt: String
  type: ContactType
  phone: AWSPhone!
  eventPhonesByPhone: [EventPhone]
    @connection(keyName: "byPhone", fields: ["phone"])
  usersByPhone: [User] @connection(keyName: "byPhone", fields: ["phone"])
  firstName: String
  lastName: String
  userId: ID!
  user: User! @connection(fields: ["userId"])
}

type EventPhone
  @key(
    name: "byPhone"
    fields: ["phone", "updatedAt"]
    queryField: "eventPhonesByPhone"
  )
  @key(
    name: "byEvent"
    fields: ["eventId", "createdAt"]
    queryField: "eventPhonesByEvent"
  )
  @key(
    name: "byUser"
    fields: ["userId", "createdAt"]
    queryField: "eventPhonesByUser"
  )
  # @auth(rules: [{ allow: owner, operations: [update, delete] }])
  @model {
  id: ID!
  cognitoUserId: String!
  createdAt: String
  updatedAt: String
  phone: AWSPhone!
  firstName: String
  lastName: String
  userId: ID!
  user: User! @connection(fields: ["userId"])
  eventId: ID!
  event: Event! @connection(fields: ["eventId"]) ## left this optional in case event gets deleted
  latestMessage: Message @connection
}

type Message
  # @auth(rules: [{ allow: owner, operations: [ update, delete] }])
  @key(
    name: "byEvent"
    fields: ["eventId", "createdAt"]
    queryField: "messagesByEvent"
  )
  @key(
    name: "byUser"
    fields: ["userId", "createdAt"]
    queryField: "messagesByUser"
  )
  @model {
  id: ID!
  cognitoUserId: String!
  createdAt: String
  updatedAt: String
  localSentAt: AWSTimestamp!
  text: String!
  userId: ID!
  user: User! @connection(fields: ["userId"])
  eventId: ID!
  event: Event! @connection(fields: ["eventId"])
  editedAt: AWSTimestamp
  deletedAt: AWSTimestamp
}

enum ContactType {
  parent
  kid
  friend
  other
}
enum EventType {
  parents
  kids
  both
  custom
}
