type User
  @model
  @key(
    name: "byCognitoUserId"
    fields: ["cognitoUserId"]
    queryField: "userByCognitoUserId"
  )
  @key(name: "byPhone", fields: ["phone"], queryField: "userByPhone") {
  id: ID!
  createdAt: String
  updatedAt: String
  cognitoUserId: String
  phone: AWSPhone!
  firstName: String
  lastName: String
  isParent: Boolean
  contacts: [Contact] @connection(name: "UserContacts")
  events: [Event] @connection(name: "UserEvents")
  deletedAt: AWSTimestamp
}

type Event @model {
  id: ID!
  createdAt: String
  updatedAt: String
  title: String
  user: User @connection(name: "UserEvents")
  attendees: [EventAttendee] @connection(keyName: "byEvent", fields: ["id"])
}
type EventAttendee
  @model(queries: null)
  @key(name: "byEvent", fields: ["eventId", "attendeeId"])
  @key(name: "byAttendee", fields: ["attendeeId", "eventId"]) {
  id: ID!
  eventId: ID!
  attendeeId: ID!
  event: Event! @connection(fields: ["eventId"])
  contact: Contact! @connection(fields: ["attendeeId"])
}
type Contact @model {
  id: ID!
  createdAt: String
  updatedAt: String
  type: ContactType ## enum, defined below
  phone: AWSPhone!
  firstName: String
  lastName: String
  user: User @connection(name: "UserContacts")
  events: [EventAttendee] @connection(keyName: "byAttendee", fields: ["id"])
}

enum ContactType {
  parent
  kid
  friend
  other
}
